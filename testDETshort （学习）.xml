<?xml version="1.0" ?>
<Simulation printTimeStamps="false" verbosity="debug">
  需要重点关注的对象包括：
  1、分支参数如何与code产生关系
  2、每一次的计算结果的终止条件是什么？也就是每一次的
  3、
  <TestInfo>
    <name>framework/Samplers/DynamicEventTrees.testClassicDETshortRAVEN</name>
    <author>alfoa</author>
    <created>2015-10-05</created>
    <classesTested>Samplers.DynamicEventTree, Models.Code</classesTested>
    <description>
       An example of using the Dynamic Event Tree Methodology with an external Code (RELAP7-like in this case).
       This test is a fast executing one that is aimed to check the mechanics of the DET methodology.
       使用的外部的程序。测试DET的方法。所以，使用的应该是通用的外部接口。
       要关注读取文件，解析文件，变化文件，然后生成新的输入文件，然后进行计算和统计分析。
       测试DET方法
    </description>
    <revisions>
      <revision author="maljdan" date="2016-04-06">Updating test cases to reflect the changes to the user input</revision>
      
      <revision author="talbpaul" date="2016-04-26">Added check for pre-existing backup files when validating</revision>
      <revision author="alfoa" date="2016-04-27">New subdirectories structure</revision>
      <revision author="maljdan" date="2016-08-03">Removing PrintCSV PostProcessor from the DET test cases.</revision>
      <revision author="maljdan" date="2016-08-08">Fixing DET test case.</revision>
      <revision author="alfoa" date="2016-10-20">Modified XSD and removed dim attribute from all the tests</revision>
      
      <revision author="alfoa" date="2017-01-21">Adding this test description.</revision>
      <revision author="alfoa" date="2018-01-24">Modification for new DataObject and new option to specify printing and plotting subdirectories (attribute ``dir'')</revision>
      <revision author="talbpaul" date="2018-01-26">Added maxqueuesize 1 to be consistent with historical behavior</revision>
    </revisions>
  </TestInfo>
  <RunInfo>
    <WorkingDir>DETshort</WorkingDir>
    <Sequence>DETrunTest,dump_results</Sequence>
    <batchSize>4</batchSize>
    <maxQueueSize>1</maxQueueSize>
  </RunInfo>

  <Files>
    <Input name="simple_det_test.i" type="">simple_det_test.i</Input> 输入，任意的一个输入文件。
  </Files>

  <Models>
    <Code name="MyRAVEN" subType="RELAP7">类似于relap7的函数。
      <executable>
        
       %FRAMEWORK_DIR%/../tests/framework/Samplers/DynamicEventTrees/simple_det.py
      </executable>
    </Code>
  </Models>

  <Distributions>
    <Uniform name="zeroToOne"> 是一个均匀分布。
      <lowerBound>0.0</lowerBound>
      <upperBound>1.0</upperBound>
    </Uniform>
  </Distributions>

  <Samplers>
    <DynamicEventTree name="DET_test" printEndXmlSummary="True"> 
      这个应该是打印一个XML总结的一个语句。文件名是但是这个只输出了一个文件。
      红色的文件名 以及打印的总结等都是动态事件树中的传递参数。
      动态事件树模型里面没有参数的选项，这个不报错吗？
      <Distribution name="zeroToOne">
        <distribution>zeroToOne</distribution>
        <grid construction="custom" type="CDF">0.9 0.8 0.7 0.7 1.1 </grid>
      </Distribution>
    </DynamicEventTree>
  </Samplers>

  <OutStreams>
    <Print name="testprint_hist_hier" dir="output_hier"> 
      保存文件的名字是可以改的。但是后面打印的地方也必须一并修改。
      这个语句是主控制程序打印。另外的一个是python打印的结果。两个不一样。
    需要明确的问题是，这个文件的格式是什么，谁规定的呢？打印的文件是CSV。格式应该是storis里面的内容。
      <type>csv</type> 格式是csv，这个是明确的。但是内容
      <source>stories</source> source的格式和内容是什么？
      这种det的格式是否是在输出类里面已经定义的呢，应该不是通用的结构。
    </Print>
    <Print name="testprint_tpset_hier" dir="output_hier">
      <type>csv</type>
      <source>Pointset</source>
      生产固定的点对。
    </Print>
    <Print name="testprint_hist_collapsed" dir="output_collapsed">
        <type>csv</type>
        <source>storiesCollapsed</source>
    </Print>
    <Print name="testprint_tpset_collapsed" dir="output_collapsed">
        <type>csv</type>
        <source>PointsetCollapsed</source>
    </Print>
    <Plot  interactive="false" name="2DHistoryPlotHier" overwrite="false" dir="output_hier">
            <plotSettings>
        <plot>
          <type>line</type>
          <x>stories|Output|time</x>
          这个数据的含义是，stories中输出参数中的time作为x轴。
          <y>stories|Output|pump_mass_flow_rate</y>
          <kwargs>
            <color>green</color>
            <label>pipe1-Hw</label>
          </kwargs>
          <interpPointsX>100</interpPointsX>
          <xlabel>time [s]</xlabel>
          <ylabel>evolution</ylabel>
        </plot>
      </plotSettings>
      <actions>
        <how>pdf</how>
        <title>
          <text> </text>
        </title>
      </actions>
    </Plot>
    <Plot  interactive="false" name="2DHistoryPlot_tpsHier" overwrite="false" dir="output_hier">
      <plotSettings>
        <plot>
          <type>scatter</type>
          <x>Pointset|Output|time</x>
          <y>Pointset|Output|pump_mass_flow_rate</y>
          <kwargs>
            <color>green</color>
            <label>pipe1-Hw</label>
          </kwargs>
          <xlabel>time [s]</xlabel>
          <ylabel>evolution</ylabel>
        </plot>
      </plotSettings>
      <actions>
        <how>pdf</how>
        <title>
          <text> 11</text>
        </title>
      </actions>
    </Plot>
    <Plot  interactive="false" name="2DHistoryPlotCollapsed" overwrite="false" dir="output_collapsed">
        <plotSettings>
            <plot>
                <type>line</type>
                <x>storiesCollapsed|Output|time</x>
                <y>storiesCollapsed|Output|pump_mass_flow_rate</y>
                <kwargs>
                    <color>green</color>
                    <label>pipe1-Hw</label>
                </kwargs>
                <interpPointsX>50</interpPointsX>
                <xlabel>time [s]</xlabel>
                <ylabel>evolution</ylabel>
            </plot>
        </plotSettings>
        <actions>
            <how>pdf</how>
            <title>
                <text> </text>
            </title>
        </actions>
    </Plot>
    <Plot  interactive="false" name="2DHistoryPlot_tpsCollapsed" overwrite="false" dir="output_collapsed">
        <plotSettings>
            <plot>
                <type>scatter</type>
                <x>PointsetCollapsed|Output|time</x>
                <y>PointsetCollapsed|Output|pump_mass_flow_rate</y>
                <kwargs>
                    <color>green</color>
                    <label>pipe1-Hw</label>
                </kwargs>
                <xlabel>time [s]</xlabel>
                <ylabel>evolution</ylabel>
            </plot>
        </plotSettings>
        <actions>
            <how>pdf</how>
            <title>
                <text> </text>
            </title>
        </actions>
    </Plot>
  </OutStreams>

  <Steps>
    <MultiRun name="DETrunTest"> 这个是多次执行的过程。但是执行的顺序是什么呢？每一步都要执行一次吗？
    就是一次输入，然后有模型。然后抽样，然后输出数据，但是结构如何确定？
    问题是什么时候截止。每一次计算code都是一次循环。也就是小循环。但是本身这个循环如何结束呢？
    det的step的终止条件就是离散的条件。step主程序运行与grid分区的方式是一致的。分几个区，step就执行几次。
    这个可以从调试程序中看出来。而每一次step中执行code中的循环，则根据自己的终止条件运行。其实也就是说，
    原则上，生产新的input文件的，应该就是grid的一次。如果有参数相关的化。
      <Input class="Files" type="">simple_det_test.i</Input> 在step里面，调用的是前面提到的类，而不是实例。所以，这里的名字
      与前面的类相同即可。
      <Model class="Models" type="Code">MyRAVEN</Model>
      <Sampler class="Samplers" type="DynamicEventTree">DET_test</Sampler>
      <Output class="Databases" type="HDF5">testBranchDatabase</Output>
      数据库默认是把所有的输入数据和输出数据都存在这个数据库里面。
      <Output class="DataObjects" type="HistorySet">stories</Output>
      这个是个与时间步长相关的数据对。
      <Output class="DataObjects" type="PointSet">Pointset</Output>
      
      <Output class="DataObjects" type="HistorySet">storiesCollapsed</Output>
      
      <Output class="DataObjects" type="PointSet">PointsetCollapsed</Output>
    </MultiRun>
    <IOStep name="dump_results">
      IOStep 主要是在结果中抽取一些信息。主要是为了打印？
        <Input class="DataObjects" type="PointSet">Pointset</Input>
              <Input class="DataObjects" type="PointSet">PointsetCollapsed</Input>
        <Input class="DataObjects" type="HistorySet">stories</Input>
        <Input class="DataObjects" type="HistorySet">storiesCollapsed</Input>
        <Output class="OutStreams" type="Print">testprint_hist_hier</Output>
        <Output class="OutStreams" type="Print">testprint_tpset_hier</Output>
        <Output class="OutStreams" type="Plot">2DHistoryPlotHier</Output>
        <Output class="OutStreams" type="Plot">2DHistoryPlot_tpsHier</Output>
        <Output class="OutStreams" type="Print">testprint_hist_collapsed</Output>
        <Output class="OutStreams" type="Print">testprint_tpset_collapsed</Output>
        <Output class="OutStreams" type="Plot">2DHistoryPlotCollapsed</Output>
        <Output class="OutStreams" type="Plot">2DHistoryPlot_tpsCollapsed</Output>
    </IOStep>
  </Steps>

  <Databases>
    <HDF5 name="testBranchDatabase" readMode="overwrite"/>
  </Databases>

  <DataObjects>
      <!--
       hierarchical="true" means that all the histories
       are not going to be reconstructed. All the branches are going to be
       printed or plotted independently
       -->
    <PointSet hierarchical="true" name="Pointset">这里规定了输出的格式。
      <Input>dummy_for_branch</Input>
      <Output>pump_mass_flow_rate,time</Output>  在这里面定义输出。
      第一行是分支信息、第二行是泵流量、第三行是时间。
    </PointSet>
    <!--
     hierarchical="false" is the default value. It means that all the histories
     are going to be reconstructed from all the branches
     -->
    <PointSet hierarchical="false" name="PointsetCollapsed">
        <Input>dummy_for_branch</Input>
        <Output>pump_mass_flow_rate,time</Output>
    </PointSet>
    <!--
     hierarchical="true" means that all the histories
     are not going to be reconstructed. All the branches are going to be
     printed or plotted independently
     -->
    <HistorySet hierarchical="false" name="storiesCollapsed">
        <Input>dummy_for_branch</Input>
        <Output>pump_mass_flow_rate,time</Output>
    </HistorySet>
    <!--
     hierarchical="false" is the default value. It means that all the histories
     are going to be reconstructed from all the branches
     -->
    <HistorySet hierarchical="true" name="stories">
        <Input>dummy_for_branch</Input>
        <Output>pump_mass_flow_rate,time</Output> 可以控制过程中的X变量。但是不能控制最终结果。
        最终结果的格式是由谁来控制的，并且结果如何利用呢？
        并且dumy_for_brach又是什么变量呢？
        理解一下就是输出数据必须
    </HistorySet>
  </DataObjects>

</Simulation>
